 # -*- coding: utf-8 -*-
 
from django.conf import settings
from django.db import models
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin   
from django.utils import timezone
from django.utils.encoding import smart_str
from cStringIO import StringIO

from django.http.response import HttpResponse
import  zipfile 

class UserManager(BaseUserManager):
    
    def create_user(self, email=None, password=None, **extra_fields):
        """
        Creates and saves a User with the given email and password.
        """        
        
        if not email:
            raise ValueError('The given email must be set')
        email = UserManager.normalize_email(email)
        new_user = self.model(email=email,
                          is_staff=False, is_active=True, is_superuser=False,
                          **extra_fields)

        new_user.set_password(password)
        new_user.save(using=self._db)
        return new_user

    def create_superuser(self, email, password, **extra_fields):
        
        new_user = self.create_user(email, password, **extra_fields)
        new_user.is_staff = True
        new_user.is_active = True
        new_user.is_superuser = True
        new_user.save(using=self._db)
        return new_user   

class User(AbstractBaseUser,PermissionsMixin):
    
    email = models.EmailField(max_length=100, unique=True, db_index=True)
    
    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=False) 
    
    objects = UserManager()
    
    USERNAME_FIELD = 'email'
    
    def get_full_name(self):        
        return self.email

    def get_short_name(self):
        return self.email
 
    def __unicode__(self):       
        return self.email
    
    def has_perm(self,perm, obj=None):
        return self.is_superuser
    
    def has_module_perms(self,app_label):
        return self.is_superuser

class CodeEntry(models.Model):
    
    owner = models.ForeignKey(settings.AUTH_USER_MODEL)
    className = models.CharField(max_length=50)
    message = models.CharField(max_length=250)
    createdOn = models.DateTimeField(default=timezone.now)
    lastModify = models.DateTimeField(default=timezone.now)
    
    def __unicode__(self):
        return self.className
    
    def get_class_path(self):
        package=str(self.className)
        return package.replace('.', '/')+'.java'
    
    def get_class_name(self):
        package=str(self.className)
        lastDotIndex= package[::-1].find('.')
        if lastDotIndex != -1 :
            return package[len(package)-lastDotIndex:]
        else :
            return package
       
    def get_class_content(self):
        current_time=timezone.now()
        class_content=r""" 
/**
                    
    This program is generated by Online Java Code Repository ( OJCRâ€Œ.ir ) on %s .
                     
**/
                    
public class %s 
    {
        public static void main(String args[])
            {
                System.out.println("%s");
            }
    }
""" % (current_time.strftime('%Y/%m/%d'),self.get_class_name(),smart_str(self.message),)
        
        return class_content
    
    def get_archived_response(self):
        
            buffer = StringIO()
            zippedFile= zipfile.ZipFile(buffer,"w")
            zippedFile.writestr(self.get_class_path(), self.get_class_content() )
            zippedFile.close()
           
            response = HttpResponse(mimetype='application/zip')
            response['Content-Disposition'] = 'attachment; filename=%s' % str(self.className)
            response['Content-length'] = buffer.tell()
            buffer.seek(0)
            response.write(buffer.read())
            return response
         